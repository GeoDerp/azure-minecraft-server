{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "serverName": {
      "type": "string",
      "metadata": {
        "description": "The name of your minecraft server. Must be unique within Azure"
      }
    },
    "EULA": {
      "type": "string",
      "defaultValue": "false",
      "metadata": {
        "description": "Do you accept the Mojang/Microsoft EULA"
      },
      "allowedValues": [
        "true",
        "false"
      ]  
    },
    "serverModrinth": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/USER/REPO/VERSION/pack.toml",
      "metadata": {
        "description": "Modrinth Modpack project slug"
      }
    },
    "containerImage": {
      "type": "string",
      "defaultValue": "latest",
      "metadata": {
        "description": "The Container Tag (Ex. java17-alpine)"
      }
    },
    "serverOperators": {
      "type": "string",
      "metadata": {
        "description": "The server operator usernames (comma separated)"
      }
    },
    "ModrinthVersionID": {
      "type": "string",
      "defaultValue": "optional",
      "metadata": {
        "description": "(optional) A specific version ID (located in the Metadata section). Warning, This will override all other optional sections bellow"
      }
    },
    "ModrinthLoader": {
      "type": "string",
      "defaultValue": "optional",
      "metadata": {
        "description": "(optional) A specific modpack modloader. Don't use in conjunction with ModrinthVersionID"
      },
      "allowedValues": [
        "optional",
        "FABRIC",
        "FORGE",
        "QUILT"
      ]  
    },
    "ModrinthMcVersion": {
      "type": "string",
      "defaultValue": "optional",
      "metadata": {
        "description": "(optional) A specific modpack Minecraft version (ex. 1.19.2). Don't use in conjunction with ModrinthVersionID"
      }
    },
    "ModrinthDefaultVersionType": {
      "type": "string",
      "defaultValue": "optional",
      "metadata": {
        "description": "(optional) A specific Modrinth version type. Don't use in conjunction with ModrinthVersionID"
      },
      "allowedValues": [
        "optional",
        "release",
        "beta",
        "alpha"
      ]  
    },
    "containerRestartPolicy": {
      "type": "string",
      "metadata": {
        "description": "Restart Policy of Azure container"
      },
      "defaultValue": "OnFailure",
      "allowedValues": [
        "Always",
        "Never",
        "OnFailure"
      ]  
    },
    "serverMemory": {
      "type": "int",
      "defaultValue": 6,
      "metadata": {
        "description": "Max Memory"
      }
    },
    "serverCPU": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "vCPU's"
      }
    },
    "McPort": {
      "type": "int",
      "defaultValue": 25565,
      "metadata": {
        "description": "Port you will like mc to run on"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('mcstorage', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "The name of the storage account that'll be used to store the server files. Must be unique within Azure and contain no special characters"
      }
    }
  },
  "variables": {
    "shareName": "server"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2019-04-01",
      "name": "[concat(parameters('storageAccountName'), '/default/', variables('shareName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerInstance/containerGroups",
      "name": "[parameters('serverName')]",
      "apiVersion": "2018-10-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "[variables('shareName')]"
      ],
      "properties": {
        "containers": [
          {
            "name": "[parameters('serverName')]",
            "properties": {
              "image": "[concat('itzg/minecraft-server:', parameters('containerImage'))]",
              "ports": [
                {
                  "protocol": "TCP",
                  "port": "[parameters('McPort')]"
                }
              ],
              "environmentVariables": [
                {
                  "name": "EULA",
                  "value": "[parameters('EULA')]"
                },
                {
                  "name": "OPS",
                  "value": "[parameters('serverOperators')]"
                },
                {
                  "name": "TYPE",
                  "value": "MODRINTH"
                },
                {
                  "name": "MODRINTH_PROJECT",
                  "value": "[parameters('serverModrinth')]"
                },
                {
                  "name": "MEMORY",
                  "value": ""
                },
                {
                  "name": "JVM_XX_OPTS",
                  "value": "-XX:MaxRAMPercentage=75"
                },
                {
                  "name": "[if(not(equals(parameters('ModrinthVersionID'), 'optional')),'MODRINTH_VERSION_ID', '')]",
                  "value": "[if(not(equals(parameters('ModrinthVersionID'), 'optional')),parameters('ModrinthVersionID'), '')]"
                },
                {
                  "name": "[if(and(not(equals(parameters('ModrinthLoader'), 'optional')), equals(parameters('ModrinthVersionID'), 'optional')), 'MODRINTH_LOADER', '')]",
                  "value": "[if(and(not(equals(parameters('ModrinthLoader'), 'optional')), equals(parameters('ModrinthVersionID'), 'optional')), parameters('ModrinthLoader'), '')]"
                },
                {
                  "name": "[if(and(not(equals(parameters('ModrinthMcVersion'), 'optional')), equals(parameters('ModrinthVersionID'), 'optional')), 'MODRINTH_MC_VERSION', '')]",
                  "value": "[if(and(not(equals(parameters('ModrinthMcVersion'), 'optional')), equals(parameters('ModrinthVersionID'), 'optional')), parameters('ModrinthMcVersion'), '')]"
                },
                {
                  "name": "[if(and(not(equals(parameters('ModrinthDefaultVersionType'), 'optional')), equals(parameters('ModrinthVersionID'), 'optional')), 'MODRINTH_DEFAULT_VERSION_TYPE', '')]",
                  "value": "[if(and(not(equals(parameters('ModrinthDefaultVersionType'), 'optional')), equals(parameters('ModrinthVersionID'), 'optional')), parameters('ModrinthDefaultVersionType'), '')]"
                },
                {
                  "name": "SERVER_PORT",
                  "value": "[parameters('McPort')]"
                }
              ],
              "resources": {
                "requests": {
                  "memoryInGB": "[parameters('serverMemory')]",
                  "cpu": "[parameters('serverCPU')]"
                }
              },
              "volumeMounts": [
                {
                  "name": "azurefile",
                  "mountPath": "/data"
                }
              ]
            }
          }
        ],
        "initContainers": [],
        "restartPolicy": "[parameters('containerRestartPolicy')]",
        "ipAddress": {
          "ports": [
            {
              "protocol": "TCP",
              "port": "[parameters('MCport')]"
            }
          ],
          "type": "Public",
          "dnsNameLabel": "[parameters('serverName')]"
        },
        "osType": "Linux",
        "volumes": [
          {
            "name": "azurefile",
            "azureFile": {
              "shareName": "[variables('shareName')]",
              "storageAccountName": "[parameters('storageAccountName')]",
              "storageAccountKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
            }
          }
        ]
      }
    }
  ]
}
